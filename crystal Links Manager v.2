<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mineral Link Manager</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2em;
            margin-bottom: 10px;
        }
        
        .input-section {
            padding: 30px;
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 5px;
            color: #495057;
        }
        
        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .form-group textarea {
            resize: vertical;
            min-height: 60px;
        }
        
        /* New style for task checkbox container */
        .task-checkbox-group {
            display: flex; 
            align-items: center;
            cursor: pointer;
            padding: 10px 0;
        }
        
        .task-checkbox-group input[type="checkbox"] {
            width: auto; 
            margin-right: 10px;
            transform: scale(1.2); /* Make checkbox slightly bigger */
        }

        .category-tag {
            display: inline-block;
            padding: 5px 12px;
            margin: 3px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .cat-mineral { background: #ffeaa7; color: #2d3436; }
        .cat-locality { background: #74b9ff; color: #2d3436; }
        .cat-research { background: #a29bfe; color: white; }
        .cat-metaphysical { background: #fd79a8; color: white; }
        .cat-media { background: #55efc4; color: #2d3436; }
        .cat-other { background: #dfe6e9; color: #2d3436; }
        
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .links-section {
            padding: 30px;
        }
        
        .filter-bar {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .filter-btn {
            padding: 8px 16px;
            border: 2px solid #dee2e6;
            background: white;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 14px;
            font-weight: 600;
        }
        
        .filter-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }
        
        .link-item {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            transition: all 0.3s;
        }
        
        .link-item:hover {
            border-color: #667eea;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
        }
        
        .link-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 10px;
        }
        
        .link-title {
            font-size: 18px;
            font-weight: 600;
            color: #2d3436;
            flex: 1;
        }
        
        .link-url {
            color: #667eea;
            text-decoration: none;
            word-break: break-all;
            margin-bottom: 10px;
            display: block;
        }
        
        .link-url:hover {
            text-decoration: underline;
        }
        
        .link-notes {
            color: #6c757d;
            font-size: 14px;
            margin-top: 10px;
        }

        .task-section {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px dashed #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .task-status-text {
            font-weight: 600; 
            color: #495057;
        }

        .task-btn {
            padding: 6px 12px;
            font-size: 12px;
            border: none;
            color: white;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .delete-btn {
            background: #ff7675;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            transition: background 0.3s;
        }
        
        .delete-btn:hover {
            background: #d63031;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }
        
        .empty-state h3 {
            margin-bottom: 10px;
        }
        
        .search-box {
            width: 100%;
            padding: 12px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            margin-bottom: 15px;
            font-size: 14px;
        }
        
        .search-box:focus {
            outline: none;
            border-color: #667eea;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîó Mineral Link Manager</h1>
            <p>Save links from any browser, AI chat, or device</p>
        </div>
        
        <div class="input-section">
            <div class="form-group">
                <label>üè∑Ô∏è Title</label>
                <input type="text" id="linkTitle" placeholder="e.g., Quartz Crystal Systems">
            </div>
            
            <div class="form-group">
                <label>üåê URL</label>
                <input type="url" id="linkUrl" placeholder="https://...">
            </div>
            
            <div class="form-group">
                <label>üìÇ Category</label>
                <select id="linkCategory">
                    <option value="mineral">ü™® Mineral Info</option>
                    <option value="locality">üìç Locality/Geography</option>
                    <option value="research">üìö Research/Scientific</option>
                    <option value="metaphysical">‚ú® Metaphysical</option>
                    <option value="media">üì∏ Photos/Videos</option>
                    <option value="other">üìå Other</option>
                </select>
            </div>
            
            <div class="form-group">
                <label>üìù Notes (optional)</label>
                <textarea id="linkNotes" placeholder="Quick notes about this link..."></textarea>
            </div>

            <div class="form-group">
                <label class="task-checkbox-group">
                    <input type="checkbox" id="linkTask">
                    <span>‚úÖ **Follow-up Task?** (e.g., Read later, Add to spreadsheet)</span>
                </label>
            </div>
            <button class="btn" onclick="addLink()">‚ûï Save Link</button>
        </div>
        
        <div class="links-section">
            <input type="text" class="search-box" id="searchBox" placeholder="üîç Search links..." onkeyup="filterLinks()">
            
            <div class="filter-bar">
                <button class="filter-btn active" onclick="filterCategory('all')">All</button>
                <button class="filter-btn" onclick="filterCategory('mineral')">ü™® Minerals</button>
                <button class="filter-btn" onclick="filterCategory('locality')">üìç Localities</button>
                <button class="filter-btn" onclick="filterCategory('research')">üìö Research</button>
                <button class="filter-btn" onclick="filterCategory('metaphysical')">‚ú® Metaphysical</button>
                <button class="filter-btn" onclick="filterCategory('media')">üì∏ Media</button>
                <button class="filter-btn" onclick="filterCategory('other')">üìå Other</button>
            </div>
            
            <div id="linksList">
                <div class="empty-state">
                    <h3>No links saved yet</h3>
                    <p>Add your first link above to get started!</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        let links = [];
        let currentFilter = 'all';

        function addLink() {
            const title = document.getElementById('linkTitle').value.trim();
            const url = document.getElementById('linkUrl').value.trim();
            const category = document.getElementById('linkCategory').value;
            const notes = document.getElementById('linkNotes').value.trim();
            // *** NEW: Get task status ***
            const hasTask = document.getElementById('linkTask').checked;
            
            if (!title || !url) {
                alert('Please fill in title and URL');
                return;
            }
            
            const link = {
                id: Date.now(),
                title,
                url,
                category,
                notes,
                date: new Date().toLocaleDateString(),
                // *** NEW: Add task properties ***
                hasTask: hasTask, 
                isComplete: false
                // ******************************
            };
            
            links.unshift(link);
            saveLinks();
            renderLinks();
            
            document.getElementById('linkTitle').value = '';
            document.getElementById('linkUrl').value = '';
            document.getElementById('linkNotes').value = '';
            document.getElementById('linkCategory').value = 'mineral';
            document.getElementById('linkTask').checked = false; // Reset the checkbox
        }
        
        function deleteLink(id) {
            if (confirm('Delete this link?')) {
                links = links.filter(link => link.id !== id);
                saveLinks();
                renderLinks();
            }
        }

        // *** NEW: Toggle task completion status ***
        function toggleTask(id) {
            const linkIndex = links.findIndex(link => link.id === id);
            if (linkIndex !== -1) {
                // Flip the status
                links[linkIndex].isComplete = !links[linkIndex].isComplete; 
                saveLinks();
                renderLinks();
            }
        }
        // *****************************************
        
        function filterCategory(cat) {
            currentFilter = cat;
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            // The event.target is passed implicitly if not defined in the function signature, 
            // but since we're calling this from an inline onclick, we should rely on 
            // the explicit call site for the active class logic if we didn't pass the event.
            // For simplicity and correctness with inline handlers:
            const filterButtons = document.querySelectorAll('.filter-bar .filter-btn');
            filterButtons.forEach(btn => {
                if (btn.textContent.toLowerCase().includes(cat === 'all' ? 'all' : getCategoryLabel(cat).split(' ')[1].toLowerCase())) {
                    btn.classList.add('active');
                }
            });

            renderLinks();
        }
        
        function filterLinks() {
            renderLinks();
        }
        
        function renderLinks() {
            const searchTerm = document.getElementById('searchBox').value.toLowerCase();
            let filtered = links;
            
            if (currentFilter !== 'all') {
                filtered = filtered.filter(link => link.category === currentFilter);
            }
            
            if (searchTerm) {
                filtered = filtered.filter(link => 
                    link.title.toLowerCase().includes(searchTerm) ||
                    link.url.toLowerCase().includes(searchTerm) ||
                    link.notes.toLowerCase().includes(searchTerm)
                );
            }
            
            const container = document.getElementById('linksList');
            
            if (filtered.length === 0) {
                container.innerHTML = '<div class="empty-state"><h3>No links found</h3><p>Try adjusting your filters or search</p></div>';
                return;
            }
            
            container.innerHTML = filtered.map(link => `
                <div class="link-item">
                    <div class="link-header">
                        <div style="flex: 1;">
                            <div class="link-title">${link.title}</div>
                            <span class="category-tag cat-${link.category}">${getCategoryLabel(link.category)}</span>
                            <small style="color: #95a5a6; margin-left: 10px;">${link.date}</small>
                        </div>
                        <button class="delete-btn" onclick="deleteLink(${link.id})">üóëÔ∏è</button>
                    </div>
                    <a href="${link.url}" target="_blank" class="link-url">${link.url}</a>
                    ${link.notes ? `<div class="link-notes">${link.notes}</div>` : ''}

                    ${link.hasTask ? `
                        <div class="task-section">
                            <div class="task-status-text">
                                Task Status: ${link.isComplete 
                                    ? '<span style="color: green;">Done! üéâ</span>' 
                                    : '<span style="color: orange;">Pending... ‚è≥</span>'}
                            </div>
                            <button class="task-btn" 
                                style="background: ${link.isComplete ? '#6c757d' : '#28a745'};" 
                                onclick="toggleTask(${link.id})">
                                ${link.isComplete ? 'Mark Pending' : 'Mark Done'}
                            </button>
                        </div>
                    ` : ''}
                    </div>
            `).join('');
        }
        
        function getCategoryLabel(cat) {
            const labels = {
                mineral: 'ü™® Mineral',
                locality: 'üìç Locality',
                research: 'üìö Research',
                metaphysical: '‚ú® Metaphysical',
                media: 'üì∏ Media',
                other: 'üìå Other'
            };
            return labels[cat];
        }
        
        function saveLinks() {
            localStorage.setItem('mineralLinks', JSON.stringify(links));
        }
        
        function loadLinks() {
            const saved = localStorage.getItem('mineralLinks');
            if (saved) {
                links = JSON.parse(saved);
                renderLinks();
            }
        }
        
        loadLinks();
    </script>
</body>
</html>
